// <auto-generated />
using System;
using BankAccount_Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankAccount_Library.Migrations
{
    [DbContext(typeof(BankAccountTypeContext))]
    [Migration("20230716132048_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BankAccount_Library.Models.AccountType", b =>
                {
                    b.Property<string>("TypeId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeDesc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("TypeId")
                        .HasName("PK__AccountT__516F039556304D38");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            TypeId = "AT0001",
                            TypeDesc = "Saving Account Description",
                            TypeName = "Saving"
                        },
                        new
                        {
                            TypeId = "AT0002",
                            TypeDesc = "Checking Account Description",
                            TypeName = "Checking"
                        },
                        new
                        {
                            TypeId = "AT0003",
                            TypeDesc = "Trading Account Description",
                            TypeName = "Trading"
                        },
                        new
                        {
                            TypeId = "AT0004",
                            TypeDesc = "Money Market Account Description",
                            TypeName = "Forex"
                        });
                });

            modelBuilder.Entity("BankAccount_Library.Models.BankAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("date");

                    b.Property<string>("TypeId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TypeID");

                    b.HasKey("AccountId")
                        .HasName("PK__BankAcco__349DA586AF9250C9");

                    b.HasIndex("TypeId");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new
                        {
                            AccountId = "ACCT0001",
                            AccountName = "Saving For New Customer 1",
                            BranchName = "Ha Noi",
                            OpenDate = new DateTime(2001, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = "AT0001"
                        },
                        new
                        {
                            AccountId = "ACCT0002",
                            AccountName = "Checking For New Customer 2",
                            BranchName = "Ha Noi",
                            OpenDate = new DateTime(2001, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = "AT0002"
                        },
                        new
                        {
                            AccountId = "ACCT0003",
                            AccountName = "Trading For New Customer 3",
                            BranchName = "Ha Noi",
                            OpenDate = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = "AT0003"
                        },
                        new
                        {
                            AccountId = "ACCT0004",
                            AccountName = "Saving For New Customer 4",
                            BranchName = "HCM",
                            OpenDate = new DateTime(2021, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = "AT0001"
                        },
                        new
                        {
                            AccountId = "ACCT0005",
                            AccountName = "Forex For New Customer 5",
                            BranchName = "HCM",
                            OpenDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = "AT0004"
                        },
                        new
                        {
                            AccountId = "ACCT0006",
                            AccountName = "Trading For New Customer 6",
                            BranchName = "Hai Phong",
                            OpenDate = new DateTime(2022, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeId = "AT0003"
                        });
                });

            modelBuilder.Entity("BankAccount_Library.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UserID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            Password = "123",
                            UserName = "Administrator",
                            UserRole = 1
                        },
                        new
                        {
                            UserId = "manager",
                            Password = "123",
                            UserName = "Manager",
                            UserRole = 2
                        },
                        new
                        {
                            UserId = "staff",
                            Password = "123",
                            UserName = "Staff",
                            UserRole = 3
                        });
                });

            modelBuilder.Entity("BankAccount_Library.Models.BankAccount", b =>
                {
                    b.HasOne("BankAccount_Library.Models.AccountType", "Type")
                        .WithMany("BankAccounts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__BankAccou__TypeI__286302EC");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BankAccount_Library.Models.AccountType", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}

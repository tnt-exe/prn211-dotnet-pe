// <auto-generated />
using System;
using CustomerAccount_Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerAccount_Library.Migrations
{
    [DbContext(typeof(CustomerAccountsContext))]
    [Migration("20230716141925_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CustomerAccount_Library.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerDesc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "CUST0001",
                            CustomerDesc = "Detail Linh Description",
                            CustomerName = "Linh Nguyen Thuy"
                        },
                        new
                        {
                            CustomerId = "CUST0002",
                            CustomerDesc = "Detail Hai Description",
                            CustomerName = "Hai Phan Van"
                        },
                        new
                        {
                            CustomerId = "CUST0003",
                            CustomerDesc = "Detail Dong Description",
                            CustomerName = "Dong Bui Huu"
                        },
                        new
                        {
                            CustomerId = "CUST0004",
                            CustomerDesc = "Detail Yen Description",
                            CustomerName = "Yen Nguyen"
                        });
                });

            modelBuilder.Entity("CustomerAccount_Library.Models.CustomerAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("date");

                    b.Property<string>("RegionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId")
                        .HasName("PK__Customer__349DA586ADA5C598");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAccounts");

                    b.HasData(
                        new
                        {
                            AccountId = "ACCT0001",
                            AccountName = "Saving For New Customer 1",
                            CustomerId = "CUST0001",
                            OpenDate = new DateTime(2001, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Eastern Ha Noi"
                        },
                        new
                        {
                            AccountId = "ACCT0002",
                            AccountName = "Checking For New Customer 1",
                            CustomerId = "CUST0001",
                            OpenDate = new DateTime(2001, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Eastern Ha Noi"
                        },
                        new
                        {
                            AccountId = "ACCT0003",
                            AccountName = "Trading For New Customer 2",
                            CustomerId = "CUST0002",
                            OpenDate = new DateTime(2020, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Western Hai Phong"
                        },
                        new
                        {
                            AccountId = "ACCT0004",
                            AccountName = "Saving For New Customer 3",
                            CustomerId = "CUST0003",
                            OpenDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Western Hai Phong"
                        },
                        new
                        {
                            AccountId = "ACCT0005",
                            AccountName = "Forex For New Customer 3",
                            CustomerId = "CUST0003",
                            OpenDate = new DateTime(2021, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Northern Hung Yen"
                        },
                        new
                        {
                            AccountId = "ACCT0006",
                            AccountName = "Trading For New Customer 4",
                            CustomerId = "CUST0004",
                            OpenDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Northern Hung Yen"
                        },
                        new
                        {
                            AccountId = "ACCT0007",
                            AccountName = "Trading For New Customer 4",
                            CustomerId = "CUST0004",
                            OpenDate = new DateTime(2022, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Southern Hai Duong"
                        });
                });

            modelBuilder.Entity("CustomerAccount_Library.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UserID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            Password = "123",
                            UserName = "Administrator",
                            UserRole = 1
                        },
                        new
                        {
                            UserId = "manager",
                            Password = "123",
                            UserName = "Manager",
                            UserRole = 2
                        },
                        new
                        {
                            UserId = "staff",
                            Password = "123",
                            UserName = "Staff",
                            UserRole = 3
                        });
                });

            modelBuilder.Entity("CustomerAccount_Library.Models.CustomerAccount", b =>
                {
                    b.HasOne("CustomerAccount_Library.Models.Customer", "Customer")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__CustomerA__Custo__286302EC");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerAccount_Library.Models.Customer", b =>
                {
                    b.Navigation("CustomerAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
